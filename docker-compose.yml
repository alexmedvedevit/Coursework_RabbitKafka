version: '3.4'

networks:
  rabbitmq-network:
    driver: bridge 

services:
  Receiver:
    container_name: receiver
    image: receiver:latest
    build:
      context: Receiver
      dockerfile: Dockerfile
    ports:
      - "5071:80"
    networks:
      - rabbitmq-network
    depends_on:
      RabbitMQ:
        condition: service_healthy

  Sender:
    container_name: sender
    image: sender:latest
    build:
      context: Sender
      dockerfile: Dockerfile
    ports:
      - "5072:80"
    networks:
      - rabbitmq-network
    depends_on:
      RabbitMQ:
        condition: service_healthy

  RabbitMQ:
    container_name: rabbitmqcont
    image: rabbitmq:3-management
    ports:
    - "5672:5672"
    - "15672:15672"
    networks:
    - rabbitmq-network
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 5

  Zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"
    networks:
    - rabbitmq-network

  Kafka:
    image: wurstmeister/kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_CREATE_TOPICS: "kafka-contract:1:1"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
    - rabbitmq-network

  prometheus:
    image: prom/prometheus:v2.44.0
    container_name: prometheus
    ports:
      - 9090:9090
    volumes:
      - ./configs/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
    - rabbitmq-network

  grafana:
    image: grafana/grafana:9.5.2
    container_name: grafana   
    ports:
      - "3000:3000"
    environment:
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ./configs/grafana:/etc/grafana/provisioning
    depends_on:
      - prometheus 
    networks:
    - rabbitmq-network

